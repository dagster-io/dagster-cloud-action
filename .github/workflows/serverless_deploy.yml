name: Serverless Deployment (PEX)
on:
  push:
    branches:
      - "main"
      - "master"
  pull_request:
    types: [opened, synchronize, reopened, closed]

concurrency:
  # Cancel in-progress deploys to same branch
  group: ${{ github.ref }}/serverless-deploy
  cancel-in-progress: true
env:
  DAGSTER_CLOUD_URL: ${{ secrets.DAGSTER_CLOUD_SERVERLESS_URL }}
  DAGSTER_CLOUD_API_TOKEN: ${{ secrets.DAGSTER_CLOUD_SERVERLESS_API_TOKEN }}
  ENABLE_FAST_DEPLOYS: 'true'
  PYTHON_VERSION: '3.8'
  DAGSTER_PROJECT_DIR: 'sample-repo'
  DAGSTER_CLOUD_FILE: 'dagster_cloud.yaml'
  DAGSTER_CLOUD_ORGANIZATION: dagster-cloud-action-github-workflow-serverless
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  dagster_cloud_default_deploy:
    name: Dagster Serverless Deploy
    runs-on: ubuntu-20.04

    steps:
      - name: Prerun Checks
        id: prerun
        uses: dagster-io/dagster-cloud-action/actions/utils/prerun@v0.1

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Validate dagster_cloud.yaml and the connection to dagster.cloud
      - name: Validate configuration
        id: ci-validate
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci check --project-dir ${{ env.DAGSTER_PROJECT_DIR }} --dagster-cloud-yaml-path ${{ env.DAGSTER_CLOUD_FILE }}"

      # Parse dagster_cloud.yaml, detect if this is branch deployment and initialize the build session
      - name: Initialize build session
        id: ci-init
        uses: dagster-io/dagster-cloud-action/actions/utils/ci-init@v0.1
        with:
          project_dir: ${{ env.DAGSTER_PROJECT_DIR }}
          dagster_cloud_yaml_path: ${{ env.DAGSTER_CLOUD_FILE }}
          # The full deployment name. If this run is for a PR, this value is ignored and a branch
          # deployment is used.
          deployment: 'prod'


      # If using fast build, build the PEX
      # First ensure the correct Python version is installed
      - name: Set up Python ${{ env.PYTHON_VERSION }} for target
        id: custom-python-version
        if: steps.pre-run.outputs.result == 'pex-deploy' && ${{ env.PYTHON_VERSION != '3.8' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install setuptools
        if: steps.pre-run.outputs.result == 'pex-deploy' && ${{ env.PYTHON_VERSION != '3.8' }}
        run: ${{ steps.custom-python-version.outputs.python-path }} -m pip install setuptools
        shell: bash

      - name: Run PEX build
        id: run-pex-build
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci build --build-strategy=python-executable --python-version ${{ env.PYTHON_VERSION }}  --pex-deps-cache-from='${{ github.repository }}' --pex-deps-cache-to='${{ github.repository }}'"


      # Otherwise, enable buildx for caching and build the Docker image
      - name: Set up Docker Buildx
        if: steps.prerun.outputs.result == 'docker-deploy'
        uses: docker/setup-buildx-action@v2

      - name: Run Docker build
        id: run-docker-build
        if: steps.prerun.outputs.result == 'docker-deploy'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci build --build-strategy=docker --python-version ${{ env.PYTHON_VERSION }}"


      # Deploy all code locations in this build session to Dagster Cloud
      - name: Deploy to Dagster Cloud
        id: ci-deploy
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci deploy"

      # Update a PR comment - this runs always() so the comment is updated on success and failure
      - name: Update PR comment for branch deployments
        id: ci-notify
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci notify --project-dir=${{ env.DAGSTER_PROJECT_DIR }}"

      # Generate a summary that shows up on the Workflow Summary page
      - name: Generate a summary
        id: ci-summary
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci status --output-format=markdown >> $GITHUB_STEP_SUMMARY"
