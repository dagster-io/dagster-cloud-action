name: "Dagster Serverless Branch Deploy"
description: "Pushes code locations to Dagster Cloud serverless branch deployments"
inputs:
  organization_id:
    description: "Dagster Cloud organization ID"
    required: true
  dagster_cloud_api_token:
    description: "Dagster Cloud API token"
    required: true
  location:
    required: true
    description: 'The code location to deploy. A JSON string consisting of keys "name", "directory", "registry", "location_file".'
  env_vars:
    required: false
    description: "A JSON string of environment variables to store in the deployed code location image."
  base_image:
    required: false
    description: "A string of the base image name for the deployed code location image."
runs:
  using: "composite"
  steps:
    - name: Checkout target repo
      uses: actions/checkout@v3
      with:
        ref: ${{ (!github.event.pull_request || github.event.pull_request.state != 'closed') && github.head_ref || github.sha }}

    - name: Checkout action repo
      uses: actions/checkout@v3
      with:
        repository: dagster-io/dagster-cloud-action
        ref: ${{ env.DAGSTER_ACTION_REF }}
        path: ./action-repo/
      env:
        # We need to make sure we are grabbing the right ref for both external invocation of the
        # actions (std) as well as internal invocations of the actions (internal tests).
        # We need to get the local action ref, but this is available in the evaluation of `env`, not
        # during the run time evaluation or the parameter evaluation:
        # https://github.com/orgs/community/discussions/25283
        DAGSTER_ACTION_REF: ${{ github.repository != 'dagster-io/dagster-cloud-action' && github.action_ref || github.head_ref }}

    - name: Get serverless organization info
      uses: ./action-repo/actions/utils/registry_info
      with:
        organization_id: ${{ inputs.organization_id }}
        deployment: prod
      env:
        DAGSTER_CLOUD_API_TOKEN: ${{ inputs.dagster_cloud_api_token }}

    - name: Login to ECR
      run: echo "${{ env.AWS_ECR_PASSWORD }}" | docker login --username ${{ env.AWS_ECR_USERNAME }} --password-stdin ${{  env.REGISTRY_URL  }}
      shell: bash

    - name: Notify build start
      uses: ./action-repo/actions/utils/notify
      with:
        organization_id: ${{ inputs.organization_id }}
        action: "pending"
        pr: "${{ github.event.number }}"
        location: ${{ inputs.location }}
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      if: ${{ github.event.pull_request.state != 'closed' }}
      uses: docker/setup-buildx-action@v1

    - name: Copy user code template file
      if: ${{ github.event.pull_request.state != 'closed' }}
      uses: ./action-repo/actions/utils/copy_template
      with:
        target_directory: ${{ fromJSON(inputs.location).directory }}
        env_vars: ${{ inputs.env_vars }}
        base_image: ${{ inputs.base_image }}

    - name: Build and push Docker image
      if: ${{ github.event.pull_request.state != 'closed' }}
      uses: docker/build-push-action@v3
      with:
        context: ${{ fromJSON(inputs.location).directory }}
        push: true
        tags: "${{ env.REGISTRY_URL }}:${{ github.sha }}"
        labels: |
          branch=${{ github.head_ref }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Dagster Cloud
      uses: ./action-repo/actions/utils/deploy
      id: deploy
      with:
        organization_id: ${{ inputs.organization_id }}
        pr: "${{ github.event.number }}"
        pr_status: "${{ github.event.pull_request.merged && 'merged' || github.event.pull_request.state }}"
        location: ${{ inputs.location }}
        image_tag: ${{ github.sha }}
        registry: ${{ env.REGISTRY_URL }}
      env:
        DAGSTER_CLOUD_API_TOKEN: ${{ inputs.dagster_cloud_api_token }}

    # Optional steps, leaves PR comment about build status
    - name: Notify build success
      uses: ./action-repo/actions/utils/notify
      with:
        organization_id: ${{ inputs.organization_id }}
        action: "complete"
        pr: "${{ github.event.number }}"
        location: ${{ inputs.location }}
        deployment: ${{ steps.deploy.outputs.deployment }}
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Notify build failure
      if: ${{ failure() }}
      uses: ./action-repo/actions/utils/notify
      with:
        organization_id: ${{ inputs.organization_id }}
        action: "failed"
        pr: "${{ github.event.number }}"
        location: ${{ inputs.location }}
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
